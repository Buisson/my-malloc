#include <stdio.h>
#include <unistd.h>
#include "my-malloc.h"
#define MOST_RESTRICTING_TYPE double
// Pour s’aligner sur des frontieres multiples
// de la taille du type le plus contraignant
typedef union header {// Header de bloc
	struct{
		unsigned int size; // Taille du bloc
		union header *ptr;// bloc libre suivant
	} info;
	MOST_RESTRICTING_TYPE dummy;// Ne sert qu’a provoquer un alignement
} Header;

/*
typedef struct header {
	unsigned int size;
	struct header *ptr;
} Header;*/


/* Une version de my-malloc.c qu'il faudra vite remplacer par quelque chose de
 * plus "raisonnable". Ce code n'est juste là que pour pouvoir lancer
 * les programmes de test.
 */
static int nb_alloc   = 0;		/* Nombre de fois où on alloué     */
static int nb_dealloc = 0;		/* Nombre de fois où on désalloué  */
static int nb_sbrk    = 0;		/* nombre de fois où a appelé sbrk */
static Header sentinelle;

void *mymalloc(size_t size) {
	static Header *bloc;
	static Header *nextBloc;
	nb_alloc += 1;
	printf("mymalloc(%zu)\n",size);
	if(bloc==NULL){
		bloc=sbrk(800);
		bloc->info.size=size;
		
		nextBloc=bloc+size;
		nextBloc->info.size=(800-size);
		nextBloc->info.ptr=&sentinelle;

		bloc->info.ptr=nextBloc;
		sentinelle.info.size=0;
		sentinelle.info.ptr=bloc;
		printf("\t-->sbrk(800)\n");
		nb_sbrk++;
	}
	else{
		printf("coucou");
		Header *ptr = sentinelle.info.ptr;
		while(ptr!=&sentinelle){
			ptr=ptr->info.ptr;
			printf("coucou");
		}
	}
	return bloc;
}


void myfree(void *ptr) {
  nb_dealloc += 1;
  free(ptr);
}

void *mycalloc(size_t nmemb, size_t size) {
  nb_alloc += 1;
  return calloc(nmemb, size);
}

void *myrealloc(void *ptr, size_t size) {
  /* il faudrait probablement changer les valeur de nballoc et
   * nb_dealloc dans une véritable implémentation 
   */
  return realloc(ptr, size);
}

#ifdef MALLOC_DBG
void mymalloc_infos(char *msg) {
  if (msg) fprintf(stderr, "**********\n*** %s\n", msg);

  fprintf(stderr, "# allocs = %3d - # deallocs = %3d - # sbrk = %3d\n",
	  nb_alloc, nb_dealloc, nb_sbrk);
  /* Ca pourrait être pas mal d'afficher ici les blocs dans la liste libre */

  if (msg) fprintf(stderr, "**********\n\n");
}
#endif
